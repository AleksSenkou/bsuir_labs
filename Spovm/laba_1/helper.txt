1.
  getpid() - получение идентификатора текущего процесса
  getppid() - идентификатор родительского процесса
  wait() - ожидание завершения дочернего процесса
  waitpid() -//-

    1) ‘p’ (execvp и execlp), принимают в качестве аргумента имя запускаемого файла и ищут его в прописан-
      ном в окружении процесса пути. Функции без этой литеры нуждаются в указа-
      нии полного пути к исполняемому файлу.
    2) ‘v’ (execv, execve и execvp) принимают список
      аргументов как null-терминированный список указателей на строки. 
    3) ‘l’ (execl, execle и execlp) принимают этот список, используя механизм
      указания произвольного числа переменных языка C.  
    4) ‘e’ (execve и execle) принимают дополнительный
      аргумент, массив переменных окружения. Он представляет собой null-
      терминированный массив указателей на строки, каждая из которых должна
      представлять собой запись вида “VARIABLE=value”.

2.
 "zombie" process - Если дочерний процесс завершен, но родитель не вызвал какую-либо из wait()-waitpid() функций, дочерний
                    становится зомби-процессом.
                    Ничего не выполняет, но явно присутствует в системе.

3. CreateProcess()
  pszApplicationName – имя исполняемого файла, который должен быть запущен;
  pszCommandLine – командная строка, передаваемая новому процессу;
  psaProcess – атрибуты защиты процесса;
  psaThread – атрибуты защиты потока;
  bInheritHandles – признак наследования дескрипторов;
  fdwCreate – флаг, определяющий тип создаваемого процесса;
  pvEnvironment – указатель на блок памяти, содержащий переменные окружения;
  pszCurDir – рабочий каталог нового процесса;
  psiStartupInfo – параметры окна нового процесса. Элементы этой структуры должны 
                  быть обнулены перед вызовом CreateProcess(), если им не присваи
                  вается специальное значение. Поле cb должно быть 
                  проинициализировано размером структуры в байтах.
  ppiProcInfo – указатель на структуру PROCESS_INFORMATION, в которую будут записаны
                идентификаторы и дескрипторы нового процесса и основного его потока.

4. SingleObject() 
  Существует четыре способа явно завершить процесс:
    1) Входная функция первичного потока возвращает управление;
    2) Один из потоков процесса вызывает ExitProcess();
    3) Любой поток любого процесса вызывает TerminateProcess();
    4) Все потоки процесса завершаются.
  
  В Windows нет понятия «зомби»-процесса. Однако в ряде случаев необходимо
  дождаться окончания выполнения процесса. Делается это при помощи функции
  WaitForSingleObject() либо же WaitForMultipleObjects().