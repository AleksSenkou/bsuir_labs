LINUX
------------------------------------------------------------------------------------------------------------------------------

1... Сигналы ...
  1) «Ненадежность» сигнала выражается в том, что в некоторых
     ситуациях процесс может не получить сгенерированный сигнал.
  2) возможны ситуации, когда второй сигнал придет в промежуток времени
     между срабатыванием функции-обработчика и восстановлением обработчика
     посредством вызова signal. В таком случае будет вызван обработчик по умол-
     чанию, что для SIGINT означает завершение процесса.
  3) Для установки обработчика сигнала в ненадежной модели используется
     следующая функция:
       void (*Signal(int signo, void (*func)(int)))(int);
  4) Маска сигналов - При этом процесс имеет возможность указать,
                      какие сигналы он будет перехватывать, а какие игнорировать,
                      т.е. составить т.н. маску сигналов.
  5) Sigaction() - надежная модель. Данная функция может как устанавливать новый обработчик, так и воз-
                   вращать старый.   
  6) sa_handler – указатель на функцию-обработчик. Может принимать
                  значения SIG_IGN и SIG_DFL;

     sa_mask – дополнительная маска игнорируемых сигналов, которая
               добавляется к существующей, прежде чем будет вызвана функция-обработчик
               сигнала. После возврата управления обработчиком маска возвращается в пре-
               дыдущее состояние;

     sa_flags – флаги, отвечающие за обработку сигнала. Обычно этот
                параметр устанавливается в 0;

     sa_sigaction – альтернативный обработчик сигналов. Используется,
                    если выставлен флаг SA_SIGINFO.
  7) Kill() - отправка сигнала произвольному процессу.
  6) Сигналы позволяют реализовать произвольную логику взаимодействия
     процессов, инициируя срабатывание функций-обработчиков в нужное время.
  9) Сигналы можно интерпретировать как программные прерывания. При
     получении сигнала выполнение текущей операции прекращается, и вызывается
     функция-обработчик данного сигнала.

2... Семафоры ...
  1) Семафоры – инструмент, разработанный исключительно для реализации механизма критических секций
                в межпроцессном взаимодействии (IPC).
  2) Semget(), Semctl() - Функция semctl() предоставляет расширенный спектр операций над семафорами, позволяя
                          получать статус семафора, получать и устанавливать значение счетчика семафора,
                          удалять набор семафоров и т.д.
  3) Semop() - для решения задач межпроцессного взаимодействия достаточно функции.

----------------------------------------------------------------------------------------------------------------------
WINDOWS
----------------------------------------------------------------------------------------------------------------------
1... События ...
  1) Они не являются полным аналогом unix-сигналов, представляя собой
     бинарные флаги, имеющие два потенциальных состояния:
     свободно или занято (сигнальное и несигнальное). Событие может быть одного
     из двух типов: со сбросом вручную и с автосбросом.
  2) CreateEvent() - создание процесса.
       HANDLE CreateEvent(PSECURITY_ATTRIBUTES psa, BOOL fManualReset, BOOL fInitialState, PCTSTR pszName):
         - psa – атрибуты защиты;
         - fManualReset – TRUE, если событие сбрасывается вручную, FALSE в противном случае;
         - fInitialState – начальное состояние события (TRUE – сигнальное, FALSE - несигнальное);
         - pszName – уникальное имя-идентификатор события.
  3) SetEvent() - переводит состояние события в свободное.
  4) ResetEvent() – -//- в занятое.
  5) WaitForSingleObject() - ожидание события.

2... Семафоры ...
  1) CreateSemaphore() - создание семафоры.
       HANDLE CreateSemaphore( PSECURITY_ATTRIBUTE psa, LONG lInitialCount, LONG lMaximumCount, PCTRTR pszName):
         - psa – атрибуты защиты;
         - fManualReset – TRUE, если событие сбрасывается вручную, FALSE в противном случае;
         - lInitialCount – начальное значение счетчика семафора;
         - lMaxCount – максимальное значение счетчика семафора;
         - pszName – уникальное имя-идентификатор события.

  2) OpenSemaphore() - открытие семафора.
  3) ReleaseSemaphore() - увеличение значения счетчика(можно изменять не только на 1).
  4) WaitForSingleObject() - ожидание освобождения ресурса(при этом счетчик автоматически будет уменьшен на 1).