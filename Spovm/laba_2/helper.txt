1. Сигналы
  1) «Ненадежность» сигнала выражается в том, что в некоторых
    ситуациях процесс может не получить сгенерированный сигнал.
  2) возможны ситуации, когда второй сигнал придет в промежуток времени
     между срабатыванием функции-обработчика и восстановлением обработчика
     посредством вызова signal. В таком случае будет вызван обработчик по умол-
     чанию, что для SIGINT означает завершение процесса.
  3) Для установки обработчика сигнала в ненадежной модели используется
     следующая функция:
     void (*signal(int signo, void (*func)(int)))(int);
  4) Маска сигналов - При этом процесс имеет возможность указать,
     какие сигналы он будет перехватывать, а какие игнорировать,
     т.е. составить т.н. маску сигналов.
  5) sigaction() - надежная модель. Данная функция может как устанавливать новый обработчик, так и воз-
                   вращать старый.   
  6) sa_handler – указатель на функцию-обработчик. Может принимать
                  значения SIG_IGN и SIG_DFL;

     sa_mask – дополнительная маска игнорируемых сигналов, которая
               добавляется к существующей, прежде чем будет вызвана функция-обработчик
               сигнала. После возврата управления обработчиком маска возвращается в пре-
               дыдущее состояние;

     sa_flags – флаги, отвечающие за обработку сигнала. Обычно этот
                параметр устанавливается в 0;

     sa_sigaction – альтернативный обработчик сигналов. Используется,
                    если выставлен флаг SA_SIGINFO.
  7) kill - отправка сигнала произвольному процессу.
  6) Сигналы позволяют реализовать произвольную логику взаимодействия
     процессов, инициируя срабатывание функций-обработчиков в нужное время.Семафоры – инструмент, разработанный исключительно для реализации механизма критических секций в межпроцессном взаимодействии (IPC).
  9) Сигналы можно интерпретировать как программные прерывания. При
     получении сигнала выполнение текущей операции прекращается, и вызывается
     функция-обработчик данного сигнала.